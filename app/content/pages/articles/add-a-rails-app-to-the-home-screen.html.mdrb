---
title: Add a Rails app to the Home Screen
author: Ross Kaffenberger
layout: article
summary: Here is the summary
description: Here is the description that will show up in the the meta day
published: '2024-09-24'
uuid: f17af1f0-5840-46f3-9b3e-33bdceb3cb93
image: articles/add-a-rails-app-to-the-home-screen/placeholder.jpg
meta_image: articles/add-a-rails-app-to-the-home-screen/placeholder.jpg
tags:
  - Rails
---

Iâ€˜m currently obsessed with installing web apps on my home screen. Using `Command+Tab` on macOS to switch between "sites" is built in to my DNA.
![Rails apps in a macos Dock](articles/add-a-rails-app-to-the-home-screen/mac-dock-rails.jpg 'Most of the apps shown here are Progressive Web Apps built with Rails')

As it turns out, several web apps I have installed are built with Rails, including [GitHub](https://github.com/), [Feedbin](https://feedbin.com/), [Mastodon](https://ruby.social/@rossta), [Hatchbox](https://hatchbox.io), [Campfire](https://once.com/campfire), and the [Rails Discourse forum](https://discuss.rubyonrails.org/). These Rails apps are installable because they are _Progressive Web Apps_.

## Rails 8 ðŸ’œ PWAs

Rails 8 is coming soon which means, by default, a new Rails app will be installable as a [Progressive Web App (PWA)](https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps). A PWA can do a lot of things a normal web app canâ€™t:

<p>
  like receive Web Push notifications,
</p>
<p>
  <%= image_tag("articles/add-a-rails-app-to-the-home-screen/web-push.jpg", alt: "This notification was triggered using Web Push") %>
</p>
<p>
  get native badge counters,
</p>
<p>
  <%= image_tag("articles/add-a-rails-app-to-the-home-screen/app-badge.jpg", alt: 'Important number displayed on your app icon!') %>
</p>
<p>
  detect network connectivity info and provide fallback UX when network connectivity is degraded,
</p>
<p>
  <%= render Figures::ImageTag.new("articles/add-a-rails-app-to-the-home-screen/network-info.jpg", alt: 'Example of network information that can be displayed from a PWA', title: "Image courtesy of 'What can PWA do today'") %>
</p>
<p>
  and access native-app-like APIs. In a nutshell, PWAs are upgraded web apps that can act more like native mobile apps. The good news is, you donâ€™t have to wait until Rails 8.
</p>

In this article, Iâ€˜ll show you how to set up your Rails app to be installable as a PWA.

## Install Joy of Rails

Since [Joy of Rails](/) is itself a Rails app, you can participate in a live demo.

<%= image_tag "articles/add-a-rails-app-to-the-home-screen/dock.jpg", title: "Screenshot of macos Launchpad with several apps including Joy of Rails" %>

I invite you to install Joy of Rails to your desktop or home screen. Try it right now:

<%= render Pwa::InstallButton %>

You should be able to use the installation button above to either launch the installation prompt in supporting browsers or, at least, view installation instructions for your browser.

You can also view installation instructions for various browsers below:

<%= turbo_frame_tag "pwa_installation_instructions", src: pwa_installation_instructions_path %>

Go ahead, try it if your browser supports it. I promise I wonâ€™t spam you with notifications or any other nonsense. This is all in the spirit of learning and sharing. Of course, you can uninstall the app anytime.

If it worked, you should be able to open Joy of Rails as a standalone application. VoilÃ !
![Screenshot of Joy of Rails in its standalone form](articles/add-a-rails-app-to-the-home-screen/standalone.jpg)

## What does it mean for a web app to be installable?

Weâ€˜re not talking about simply adding a bookmark to the site to the desktop or home screen. Installed PWAs can more deeply integrate with your device.

- A PWA can be installed like a platform-specific app without the need of an App Store\*
- In some browsers, we can customize the install process.
- An installed PWA gets an app icon on the device, alongside platform-specific apps.
- An installed PWA can be launched as a standalone app, rather than as a website in a browser.

\*I havenâ€˜t tried this yet, but PWAs can also be submitted to various app stores ([more info](https://web.dev/articles/pwas-in-app-stores).)

## Ok, so what?

I have to admit, Iâ€˜m a big fan of the Web. I want the Web to win.

As a product developer, I prefer to build for the Web. I donâ€˜t want to invest the extra time and effort to build a mobile app alongside a separate web experience nor do I look forward to going through the pain and process of getting approval from the App Store. I want my end users to have the latest updates immediately. I value the traditions of the Web: everyone has a place.

As an end user, I prefer the Web too. But, when it comes to mobile, most end users generally prefer (or are simply indoctrinated) to use native apps. I canâ€˜t help but feel if the Web is going to win, both product developers and end users may need to be willing to embrace Progressive Web Apps capabilities so that web apps can compete on native app "turf".

Making your app installable is the first step.

<%= image_tag "articles/add-a-rails-app-to-the-home-screen/launchpad.jpg", alt: "macOS Launchpad with Joy of Rails installed", class: "outside" %>

Thereâ€˜s something pretty powerful about being able to deliver an app experience without building a separate native app.

I bet youâ€˜d like to see your web app launch from the home screen or the Dock or the Launchpad, or from wherever, right alongside those native apps that live on your device.

Letâ€˜s see how.

## Prerequisites for making your app installable

For your Rails app to be installable, there are a few requirements for your application and the end user.

Your end user:

- Does not already have the app installed
- Accesses your application using a supporting browser
- Passes certain browser-specific heuristics. For example, in Chromium-based browsers, the end user must have interacted with your application and been active for more than 30 seconds.

Your app:

- Serves responses over HTTPS (or HTTP for loopback addresses like `localhost` and `127.0.0.1`)
- Provides a valid web manifest file, and
- the web manifest minimally declares the following properties:

  - `name`: the display name of your web app ([info](https://developer.mozilla.org/en-US/docs/Web/Manifest/name)),
  - `icons` (sizes `192x192` and `512x512`) ([info](https://developer.mozilla.org/en-US/docs/Web/Manifest/icons)),
  - `start_url` ([info](https://developer.mozilla.org/en-US/docs/Web/Manifest/start_url)),
  - `display` ([info](https://developer.mozilla.org/en-US/docs/Web/Manifest/display)),
  - `prefer_related_applications` is either omitted or set to `false` ([info](https://developer.mozilla.org/en-US/docs/Web/Manifest/prefer_related_applications))

For more on browser-specific installation criteria, Iâ€˜ve collected a few resources below:

- [Chrome](https://web.dev/articles/install-criteria)
- [Edge](https://learn.microsoft.com/en-us/microsoft-edge/progressive-web-apps-chromium/how-to/web-app-manifests)
- [Safari](https://support.apple.com/en-us/104996)

## Setting up your Rails app

Hereâ€™s how to get your Rails app configured to be installable as a Progressive Web App.

### Your app is served over HTTPS

The first thing to do is make sure your Rails app will be served over HTTPS. We can check `config/production.rb` to make sure requests will be forced to HTTPS:

```rb:{"filename": "config/production.rb"}
Rails.application.configure do

  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
  config.force_ssl = true

end
```

Your deployment environment should also be set up to provide valid SSL Certificates for your domain. If youâ€˜re using a platform-as-a-service like Hatchbox, Heroku, Render, or Fly.io, this will most likely be taken care of for you.

If youâ€™re using or planning to use Kamal for deployment, Kamal 2 will support for SSL certificate generation via Letâ€˜s Encrypt.

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Kamal 2 will ship with Let&#39;s Encrypt and multi-app-per-server support out of the box. No Traefik needed.</p>&mdash; DHH (@dhh) <a href="https://twitter.com/dhh/status/1790381149560394146?ref_src=twsrc%5Etfw">May 14, 2024</a></blockquote>

For testing your app installation locally, good news is thereâ€™s no special set up needed in this regard. Progressive Web App functionality, including app installation, is supported over HTTP from `localhost`.
![See, PWAs work over http://localhost](articles/add-a-rails-app-to-the-home-screen/localhost-address-bar.jpg)

### Provide a manifest file

Since the Rails 7.2, Rails provides defaults for Progressive Web App manifest JSON and serviceworker JavaScript files ([pull request](https://github.com/rails/rails/pull/50528)).

In your Rails 7.2+ `config/routes.rb` file, make sure you have the following routes added:

```rb:{"filename": "config/routes.rb"}
Rails.application.routes.draw do

  # Render dynamic PWA files from app/views/pwa/*
  get "service-worker" => "rails/pwa#service_worker", as: :pwa_service_worker
  get "manifest" => "rails/pwa#manifest", as: :pwa_manifest

end
```

You should also have corresponding files in `app/views/pwa`:
![IDE file drawer for app/views/pwa](articles/add-a-rails-app-to-the-home-screen/app-views-pwa.jpg)

- `manifest.json.erb`
- `serviceworker.js.erb`

The contents of `manifest.json.erb` is important for app installation. Only the manifest file is needed, but the serviceworker will come in handy for additional PWA features.ðŸ˜‰ You can [subscribe](#newsletter-signup) to my newsletter to get notified when I post more on this subject and other Rails-relevant content.

For a newly generated Rails 7.2 application, this is what youâ€™ll see in `manifest.json.erb`:

```erb:{"filename": "app/views/pwa/manifest.json.erb"}
{
  "name": "YourNewApp",
  "icons": [
    {
      "src": "/icon.png",
      "type": "image/png",
      "sizes": "512x512"
    },
    {
      "src": "/icon.png",
      "type": "image/png",
      "sizes": "512x512",
      "purpose": "maskable"
    }
  ],
  "start_url": "/",
  "display": "standalone",
  "scope": "/",
  "description": "PwaDemo.",
  "theme_color": "red",
  "background_color": "red"
}
```

## What if my app isnâ€˜t on Rails 7.2

Thatâ€˜s ok! If you canâ€™t upgrade now, you can still set up your Rails app similarly. You would add routes and view files as described above.

Youâ€˜ll additionally need to add a controller like the one provided by default in Rails 7.2+:

```rb:{"filename": "app/controllers/rails/pwa_controller.rb"}
# frozen_string_literal: true

class Rails::PwaController < Rails::ApplicationController
  skip_forgery_protection

  def service_worker
    render template: "pwa/service-worker", layout: false
  end

  def manifest
    render template: "pwa/manifest", layout: false
  end
end
```

## Update your manifest

(from MDN https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Tutorials/js13kGames/Installable_PWAs)
Here is a description of the members shown in the previous code sample:

name: The full name of your web app.
short_name: Short name to be shown on the home screen.
description: A sentence or two explaining what your app does.
icons: Information about the app icons â€” source URLs, sizes, and types. Be sure to include at least a few, so that one that fits best will be chosen for the user's device. See Define your app icons.
start_url: The index document to launch when starting the app.
display: How the app is displayed; can be fullscreen, standalone, minimal-ui, or browser.
theme_color: A primary color for the UI, used by operating system.
background_color: A color used as the app's default background, used during install and on the splash screen.

---

Why would you make your app installable?

Back in the day, we used this Site-Specific Browser.

Should _you_ make your app installable?

How to make your app installable

## Custom installation prompt

In [browsers that support the `beforeinstallprompt` event](https://caniuse.com/?search=beforeinstallprompt) (Chrome, Edge, Android, at the time of this writing), we can provide a custom installation experience, as with a button embedded in this article:

---

By default, PWAs are served over HTTPS and are therefore safe and secure
PWAs are lightweight and offer high performance
Especially on Android, a PWA can almost do anything a native app can

---

https://vite-pwa-org.netlify.app/assets-generator/#pwa-minimal-icons-requirements

As pointed out in PWA Minimal Requirements, you will need:

a 192x192 icon (PWA Manifest icon)
a 512x512 icon (PWA Manifest icon)
a 180x180 icon for iOS/MacOS (html head link: <link rel="apple-touch-icon" href="/apple-touch-icon.png">)
We also suggest you to include:

A 64x64 icon for Windows (Edge) (PWA Manifest icon)
A 512x512 icon for Android with purpose: 'any' (PWA Manifest icon)

<%= render Pwa::InstallButton %>

## Resources

How to use Safari web apps on Mac

Back in the mid-2000s, I remember [site-specific browsers](https://en.wikipedia.org/wiki/Site-specific_browser) were sort of a thing among the tech community. You would get
