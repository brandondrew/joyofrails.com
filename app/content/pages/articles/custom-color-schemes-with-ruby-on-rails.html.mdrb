---
title: Custom color schemes with Ruby on Rails
author: Ross Kaffenberger
layout: article
description: You can edit the color scheme for this website right in this blog post. I‘ll show you how I did it so you can add custom color schemes to your Rails application.
published: '2024-07-10'
image: articles/custom-color-schemes-with-ruby-on-rails/rainbows.jpg
draft: true
uuid: d99f045b-f3f7-4408-811e-9701b1a13ce8
tags:
  - Rails
---

In this post, I will describe how to enable users to customize the color scheme of your Rails application. We’re going to accomplish this with [Ruby on Rails](https://edgeguides.rubyonrails.org/), [Hotwire](https://hotwired.dev/), and [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties).

But before I tell you how to add customizable colors to your Rails app, I want show you first.

Below, you can edit the color scheme of this site. You can preview different color schemes right here on this page. You can also save your choice browse the site with your new colors.

Give it a try.

<%= turbo_frame_tag "color-scheme-form", src: settings_color_scheme_path(custom_color_scheme_params), class: "grid-cols-12 lg:grid-cols-12" %>
<noscript>
JavaScript not enabled? Go to the <%= link_to "color scheme demo", settings_color_scheme_path(custom_color_scheme_params) %>. Then come back when you’re done.
</noscript>

Pretty cool, huh?

## Theme with CSS Variables

A key piece of making a customizable color scheme is using [CSS variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties). CSS variables make it easy to change repeated CSS in a lot of places. They can also be overridden.

You can set a CSS variable with double dashes, `--`:

```css:{"show_header": false}
a {
  --my-link-color: #354bc0;
}
```

Setting a variable doesn't do anything yet. To make use of a CSS variable, call `var()` in a relevant property:

```css:{"show_header": false}
a {
  color: var(--my-link-color);
}
```

CSS variables are available within the scope they are declared. To make a CSS variable available everywhere in your CSS, declare it in the pseudo-class `:root`:

```css:{"show_header": false}
:root {
  --my-link-color: rgb(53, 75, 192);
}
```

Now we can use `--my-link-color` with any selector:

```css:{"show_header": false}
a,
.button {
  color: var(--my-link-color);
}
```

CSS variables can be defined in terms of others.

```css:{"show_header": false}
:root {
  --theme-link-color: var(--my-link-color);
}
```

The `var()` expression allows for declaring a fallback. In the example below, `--theme-link-color` will be set to the value of `--my-link-color` if defined, otherwise it will be the given `rgb()` value.

```css:{"show_header": false}
:root {
  --theme-link-color: var(--my-link-color, rgb(53, 75, 192));
}
```

This will work even when `--my-link-color` is defined _after_ `--theme-link-color` or even changed after, such as via a JavaScript interaction like through the color scheme form above.

Together, these features help make CSS variables an ideal choice for setting up customizable themes.

##

## Putting it together with Joy

Want to know how [Joy of Rails](/) defines its theme?

It starts with the color palette. Here are the colors for the site’s theme, defined as CSS variables on `:root`. They are all shades of blue using the same weight pattern as you’ll find in [Tailwind colors](https://tailwindcss.com/docs/customizing-colors).

<%= render CodeBlock::Article.new ColorSchemes::CssVariables.new(color_scheme: ColorScheme.cached_default).call, language: :css, filename: "inline css" %>

These variables aren’t used directly in any CSS, for the most part. They are used to define the general site theme variables, which I call `--joy-color-<weight>`.

<%= render_code_block_app_file("app/javascript/css/config/theme.css", language: "css", revision: "7041644f7b1e0693191f0574a9426f828b052a9f", lines: [1..12, 93]) %>

Note that each of the expressions first look for CSS variables of the form `--my-color-<weight>`. More about this later.

Then we build from `--joy-color-` variables to CSS properties.

<%= render_code_block_app_file("app/javascript/css/config/theme.css", language: "css", revision: "7041644f7b1e0693191f0574a9426f828b052a9f", lines: [1, 30..33, 66]) %>

<%= render_code_block_app_file("app/javascript/css/components/site-header.css", language: "css", revision: "7041644f7b1e0693191f0574a9426f828b052a9f", lines: [1..4]) %>

I can override the `:root` properties within certain scopes, such as when I want to change this up for the Dark Mode theme while mixing-and-matching with other properties, like for general grays and whites.

<%= render_code_block_app_file("app/javascript/css/config/theme.css", language: "css", revision: "7041644f7b1e0693191f0574a9426f828b052a9f", lines: [68, 83..86, 93]) %>

Remember the `--my-color` CSS variables? When you select a color scheme to preview or save, the application inserts the predefined weights as inline styles when the page is rendered. Because of the way the theme colors are defined above, `--my-color` weights take preference over the default when they are defined.

<%= render CodeBlock::Article.new(example_color_scheme_css, language: :css, filename: "inline css") %>

This works for Tailwind too! The approach used here is consistent with the Tailwind docs section on [customizing colors using CSS variables](https://tailwindcss.com/docs/customizing-colors#using-css-variables).

There's a lot more to CSS variables than what I’ve described here. Check out [MDN's introduction to CSS variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties) to go deeper.

Building your own color scheme(s) in CSS is beyond the scope of this article but I suggest you start by picking some colors. I recommend [uicolors.app](https://uicolors.app) for Tailwind-friendly color palettes. [ColorHunt](https://colorhunt.co/) is a great choice for broad appeal.

## Instant updates

Did you notice how the color choice updated automatically? At least, it should have; I’m assuming you have JavaScript enabled.

If you don’t have JavaScript enabled, you would still be able to navigate to the <%= link_to "color scheme settings page", settings_color_scheme_path %> to edit your color scheme. One thing I love about building interactive components with Rails is you can choose to adopt [progressive enhancement](https://developer.mozilla.org/en-US/docs/Glossary/Progressive_Enhancement)—that is to say: make the site work for "as many users as possible" while providing improvements for fully enabled devices and modern browsers—something I strive for with [Joy of Rails](/).

![Rainbow](articles/custom-color-schemes-with-ruby-on-rails/rainbows.jpg 'Rainbow, by my son, Jasper')
