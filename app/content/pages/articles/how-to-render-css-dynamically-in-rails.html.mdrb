---
title: How to Render CSS Dynamically in Rails
author: Ross Kaffenberger
layout: article
summary: Rails is not just for HTML over the wire. This post demonstrates how and why you might use Rails for delivering CSS on the fly too.
description: Rails is not just for HTML over the wire. This post demonstrates how and why you might use Rails for delivering CSS on the fly too.
published: '2024-08-07'
draft: true
uuid: 3be769c4-6a2a-4cfb-8008-94046b952aa6
image: articles/how-to-render-css-dynamically-in-rails/placeholder.jpg
meta_image: articles/how-to-render-css-dynamically-in-rails/placeholder.jpg
tags:
  - Rails
---

Let‘s talk about how to render CSS dynamically with Ruby on Rails.

Most of the time, you might think of CSS as a static asset. Sometimes, however, you may want _dynamic_ CSS in which the CSS delivered to the end user depends on their preferences, maybe an A/B test, or some data in the system that‘s needed to make decisions about what styles to present.

In this post, we‘ll talk about some techniques and considerations to accomplish this in Rails.

In my [previous article](/articles/color-schemes-with-ruby-on-rails), I used Hotwire to swap out a `<style>` tag with the color scheme CSS. As a recap, here‘s the demo so you can see how it works:

<%= turbo_frame_tag "color-scheme-preview", src: preview_settings_color_scheme_path(custom_color_scheme_params), class: "grid-cols-12 lg:grid-cols-12 m-bs-m" %>
<noscript>
JavaScript not enabled? Go to the <%= link_to "color scheme demo", settings_color_scheme_path(custom_color_scheme_params) %>. Then come back when you’re done.
</noscript>

## ERB isn‘t just for HTML

While most of your CSS likely should be rendered in a bundled CSS file (or files), like `application.css`, it may make sense for small bits of custom CSS to be rendered inline in HTML. Your static CSS files will be served from your web server or likely a Content Delivery Network (CDN) depending on your application setup, which skips your Rails application logic.

The advantage of rendering a snippet of CSS in your Rails HTML template or partials is you to use logic to determine what CSS to output at the time of the request.

For example, to drive the color scheme of Joy of Rails that it can be personalized by your selection‘s, the differentiating CSS is rendered directly into the application template in a `<style>` tag.

In the application layout for Joy of Rails, `application.html.erb`, the following partial is rendered:

<%= render CodeBlock::AppFile.new("app/views/application/theme/\_color.html.erb", language: "erb") %>

Joy of Rails uses [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties) to define background colors and font colors throughout its static CSS files. Using CSS variables for dynamic CSS isn‘t required but sure makes the job of updating CSS easier. We can set values of CSS variables to new values by rendering new CSS or by JavaScript manipulation; this makes CSS variables an ideal choice for dynamic CSS techniques like those described in this article.

The actual contents of the `<style>` tag generated by `ColorSchemes::Css` aren‘t that important, but here‘s an example of what the output looks like in the HTML source.

```html
<style>
  :root {
    --color-aquamarine-50: hsla(154, 100%, 96%, 1);
    --color-aquamarine-100: hsla(151, 100%, 90%, 1);
    --color-aquamarine-200: hsla(154, 98%, 80%, 1);
    --color-aquamarine-300: hsla(158, 92%, 61%, 1);
    --color-aquamarine-400: hsla(160, 83%, 52%, 1);
    --color-aquamarine-500: hsla(161, 100%, 41%, 1);
    --color-aquamarine-600: hsla(161, 100%, 34%, 1);
    --color-aquamarine-700: hsla(163, 100%, 27%, 1);
    --color-aquamarine-800: hsla(164, 100%, 21%, 1);
    --color-aquamarine-900: hsla(165, 100%, 17%, 1);
    --color-aquamarine-950: hsla(166, 100%, 10%, 1);
  }
  :root {
    --my-color-50: var(--color-aquamarine-50);
    --my-color-100: var(--color-aquamarine-100);
    --my-color-200: var(--color-aquamarine-200);
    --my-color-300: var(--color-aquamarine-300);
    --my-color-400: var(--color-aquamarine-400);
    --my-color-500: var(--color-aquamarine-500);
    --my-color-600: var(--color-aquamarine-600);
    --my-color-700: var(--color-aquamarine-700);
    --my-color-800: var(--color-aquamarine-800);
    --my-color-900: var(--color-aquamarine-900);
    --my-color-950: var(--color-aquamarine-950);
  }
</style>
```

> You can also use Developer tools to **View Source** for this page and find the rendered CSS in the `<head>` tag.

The key point here is that we can use logic in Rails templates when the page is rendered

## Rails and MIME types

Generate Dynamic CSS from a Controller?

Generating CSS dynamically from a controller offers several advantages:

Flexibility: Allows for real-time style changes based on user preferences or application state.
Customization: Enables user-specific or context-specific styling.
Performance: Can reduce the overall CSS payload by serving only necessary styles.
DRY principle: Avoids repetition in static stylesheets.

Step-by-Step Guide: Implementing Dynamic CSS Generation

The respond_to method in Rails controllers allows you to define different responses based on the requested format. It's commonly used to serve different content types (HTML, JSON, XML) from the same action.

```ruby
class ProductsController < ApplicationController
  def show
    @product = Product.find(params[:id])

    respond_to do |format|
      format.html
      format.json { render json: @product }
      format.css { render css: @product.custom_styles }
    end
  end
end
```
